{
  "active": false,
  "connections": {
    "Workflow Input Trigger": {
      "main": [
        [
          {
            "node": "Airtable7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Datenauswertung": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Sort",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Airtable",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Airtable7": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Airtable": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sort": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Datenauswertung",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Datenauswertung",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-02-19T22:01:30.007Z",
  "id": "uY00KRfSftJnvfuT",
  "meta": null,
  "name": "Datenauswertung-Final-Pylorisches",
  "nodes": [
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        660,
        1100
      ],
      "id": "53ebdd5f-4c8a-4d30-a5e6-32b3a1d50821",
      "name": "Workflow Input Trigger"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Prompt für den ganzheitlichen Datenanalyse-Agenten\nRolle:\nDu bist ein hochentwickelter wissenschaftlicher Analyse-Agent. Deine Aufgabe ist es, alle gesammelten Forschungsdaten kritisch und ganzheitlich zu analysieren und eine präzise, tiefgehende Zusammenfassung der wichtigsten Erkenntnisse bereitzustellen.\n\nEingabe:\nDu erhältst strukturierte Daten aus folgenden Quellen:\n\nUser-Frage: Die zentrale Forschungsfrage oder das wissenschaftliche Problem.\nHypothesen: Die bisher formulierten Annahmen, die durch Daten gestützt, widerlegt oder unklar geblieben sind.\nSzenarien: Beschreibungen experimenteller oder simulierter Bedingungen und deren Kontext.\nResearch Tasks: Relevante wissenschaftliche Arbeiten, Theorien oder empirische Befunde.\nSimulationen: Alle durchgeführten Simulationen mit Parametern, Ergebnissen und beobachteten Mustern.\nZiele deiner Analyse:\n\nGanzheitliche Zusammenfassung: Erstelle eine wissenschaftlich fundierte Zusammenfassung aller bisherigen Erkenntnisse aus den Forschungsdaten.\nMustererkennung: Identifiziere signifikante Korrelationen, Trends oder Anomalien in den Daten.\nHypothesenbewertung: Analysiere, inwieweit die gesammelten Daten bestehende Hypothesen stützen oder widerlegen.\nTheoretische Einordnung: Setze die Erkenntnisse in den Kontext bestehender wissenschaftlicher Theorien und Forschungsergebnisse.\nLückenanalyse: Identifiziere widersprüchliche oder unzureichende Daten, die die wissenschaftliche Interpretation erschweren.\n\n-----\nAntwortformat:\nDie Ausgabe soll klar, wissenschaftlich fundiert und strukturiert sein:\n\nGesamtzusammenfassung:\n  - [Überblick über die gewonnenen Erkenntnisse]\n  \nDetaillierte wissenschaftliche Analyse:\n  - Muster & Korrelationen:\n      - [Beschreibe relevante Zusammenhänge zwischen Datenpunkten]\n  - Anomalien & unerwartete Ergebnisse:\n      - [Liste unerwartete oder schwer erklärbare Phänomene auf]\n  - Hypothesenbewertung:\n      - [Hypothese 1]: [Gestützt / Widerlegt / Unklar], Begründung: [Wissenschaftliche Erklärung]\n      - [Hypothese 2]: [Gestützt / Widerlegt / Unklar], Begründung: [Wissenschaftliche Erklärung]\n  - Theoretischer Kontext:\n      - [Einordnung der Erkenntnisse in bestehende wissenschaftliche Theorien]\n  \nLücken & Unsicherheiten:\n  - [Fehlende Daten oder widersprüchliche Ergebnisse]\n  - [Mögliche Verzerrungen oder Unsicherheiten in der Analyse]\nAnweisung für den Agenten:\nDenke kritisch und analytisch über die vorhandenen Daten nach. Setze sie in den Kontext wissenschaftlicher Theorien, hinterfrage mögliche Verzerrungen und liefere eine tiefgehende, ganzheitliche Analyse. Falls Unsicherheiten oder offene Fragen bestehen, beschreibe diese präzise und wissenschaftlich fundiert.\nSchreibe deine Antwort als Fazit und Zusammenfassung.\n\n-----\n\nVerfügbare Informationen:\n{{ $('Code3').item.json.Data }}"
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        2680,
        760
      ],
      "id": "5243b145-e9b4-4c7b-abf0-5bb53cbe3efd",
      "name": "Datenauswertung"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => ({ json: { id: item.json.id } }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1320,
        1100
      ],
      "id": "c2e8a5e2-cd26-4901-860b-3bc7ff3fc896",
      "name": "Code"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1540,
        1100
      ],
      "id": "9240d2b1-be84-492b-8241-4c4e219aa54d",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "appw2bTn3Zt80Vgia",
          "mode": "list",
          "cachedResultName": "Pylorisches",
          "cachedResultUrl": "https://airtable.com/appw2bTn3Zt80Vgia"
        },
        "table": {
          "__rl": true,
          "value": "tbl8tlIfo2kUlK8Ck",
          "mode": "list",
          "cachedResultName": "Analyseergebnisse",
          "cachedResultUrl": "https://airtable.com/appw2bTn3Zt80Vgia/tbl8tlIfo2kUlK8Ck"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        1080,
        1100
      ],
      "id": "3479296d-678c-40eb-89ca-ca92daead3b6",
      "name": "Airtable7",
      "credentials": {
        "airtableTokenApi": {
          "id": "zt1LZGV2136revL0",
          "name": "RAD Pylorisches"
        }
      }
    },
    {
      "parameters": {
        "base": {
          "__rl": true,
          "value": "appw2bTn3Zt80Vgia",
          "mode": "list",
          "cachedResultName": "Pylorisches",
          "cachedResultUrl": "https://airtable.com/appw2bTn3Zt80Vgia"
        },
        "table": {
          "__rl": true,
          "value": "tbl8tlIfo2kUlK8Ck",
          "mode": "list",
          "cachedResultName": "Analyseergebnisse",
          "cachedResultUrl": "https://airtable.com/appw2bTn3Zt80Vgia/tbl8tlIfo2kUlK8Ck"
        },
        "id": "={{ $json.id }}",
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        1780,
        1260
      ],
      "id": "96a2db4c-0fb0-4cea-b509-39f8828d38ad",
      "name": "Airtable",
      "credentials": {
        "airtableTokenApi": {
          "id": "zt1LZGV2136revL0",
          "name": "RAD Pylorisches"
        }
      }
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "createdTime"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.sort",
      "typeVersion": 1,
      "position": [
        1980,
        1080
      ],
      "id": "3282dec8-f6ae-42c7-8ef1-668bcdd15b85",
      "name": "Sort"
    },
    {
      "parameters": {
        "jsCode": "return [{\n    json: {\n        Data: items.map(item => JSON.stringify(item.json, null, 2)).join(\"\\n\\n\")\n    }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2200,
        1080
      ],
      "id": "d9844afe-458e-4c02-91ab-bfa7099b6ab4",
      "name": "Code3"
    },
    {
      "parameters": {
        "model": "openai/o3-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        2700,
        920
      ],
      "id": "a6e29323-7ed0-41b3-b2a9-f5009532f4e7",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "pG95LwYPd3nZ3zAb",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "advanced": true,
        "mergeByFields": {
          "values": [
            {
              "field1": "Data",
              "field2": "text"
            }
          ]
        },
        "joinMode": "enrichInput1",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        3180,
        1100
      ],
      "id": "b1ff0e09-9ae1-4a9f-bcad-bf4d93187613",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "// Funktion zur sicheren Formatierung des Textes\nfunction simpleFormat(text) {\n    if (!text) return ''; // Rückgabe eines leeren Strings, wenn kein Text vorhanden ist\n    return text\n        .split('\\n\\n') // Absätze trennen\n        .map(paragraph =>\n            paragraph\n                .replace(/\\n/g, '<br>')  // Zeilenumbrüche in Absätze umwandeln\n                .replace(/\\s{2,}/g, ' ') // überflüssige Leerzeichen entfernen\n                .trim()\n        )\n        .join('<br><br>'); // Absätze mit doppeltem <br> trennen\n}\n\n// Hauptlogik\nfor (const item of items) {\n    let data = {};\n    // Falls die relevanten Daten als JSON-String im Feld \"Data\" vorliegen, diesen parsen\n    if (item.json.Data) {\n        try {\n            data = JSON.parse(item.json.Data);\n        } catch (error) {\n            console.error('Fehler beim Parsen von Data:', error);\n        }\n    }\n    \n    // Eigenschaften aus data übernehmen – falls nicht vorhanden, als Fallback direkt aus item.json\n    const simulationsmodell = data.Simulationsmodell || item.json.Simulationsmodell || '';\n    const createdTime = data.createdTime || item.json.createdTime || new Date().toISOString();\n    const szenario = data.Szenario || item.json.Szenario || '';\n    const analyseergebnisse = data.Analyseergebnisse || item.json.Analyseergebnisse || '';\n    const simulationsparameter = data.Simulationsparameter || item.json.Simulationsparameter || '';\n\n    item.json.FormattedAnalysis = `\n        === ${simulationsmodell} ===\n        Erstellt am: ${new Date(createdTime).toLocaleDateString()}\n        Szenario: ${szenario}\n        \n        ${simpleFormat(analyseergebnisse)}\n        \n        Parameter: ${simulationsparameter}\n    `.replace(/\\n/g, '<br>'); // Gesamter Text mit <br> um Zeilenumbrüche zu realisieren\n}\n\nreturn items;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3500,
        1100
      ],
      "id": "370f3b6c-fddb-444a-a65f-7ba2cca861f9",
      "name": "Code1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9907c391-5811-4db3-b56d-310abfd0adfa",
              "name": "Data",
              "value": "={{ $json.Data }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3880,
        1100
      ],
      "id": "7e26ad64-6613-43d1-8d9b-d84fa26ddf1b",
      "name": "Edit Fields"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-02-19T22:27:15.000Z",
  "versionId": "4ab6a227-512a-4c9f-a11f-53d71e3ce4d3"
}